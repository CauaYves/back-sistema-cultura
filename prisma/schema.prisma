// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String
  cpf                  String                @unique
  email                String                @unique
  emailConfirmed       Boolean               @default(false)
  password             String
  SessionId            Int?
  Sessions             Session?
  UserConfirmationCode UserConfirmationCode?
  CulturalAgent        CulturalAgent?
  Contact              Contact[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  CulturalCollective   CulturalCollective[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserConfirmationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  User      User     @relation(fields: [userId], references: [id])
  code      String
  used      Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CulturalAgent {
  id             Int      @id @default(autoincrement())
  alternativeTel String
  cep            String
  complement     String
  county         String
  cpf            String
  cultura        Boolean
  email          String
  houseNumber    String
  name           String
  neighboorhood  String
  phone          String
  proponent      String
  public         Boolean
  publicPlace    String
  tel            String
  uf             String
  fileId         String   @unique
  File           File?    @relation(fields: [fileId], references: [id])
  userId         Int      @unique
  User           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model File {
  id            String         @id @default(cuid())
  name          String
  key           String
  contentType   String
  CulturalAgent CulturalAgent?
  createdAt     DateTime       @default(now())
}

model Contact {
  id        Int      @id @default(autoincrement())
  type      String
  number    String
  public    Boolean
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CulturalCollective {
  id            Int      @id @default(autoincrement())
  name          String
  area          String
  opening       String
  phone         String
  email         String
  address       String
  neighboorhood String
  cep           String
  complement    String?
  county        String
  responsible   String
  userId        Int
  User          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// model Project {
//   id           Int       @id @default(autoincrement())
//   title        String
//   observations String
//   lines        String[]
//   openingDate  DateTime
//   endDate      DateTime?
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
// }

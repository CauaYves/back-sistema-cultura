// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String
  cpf                  String                @unique
  email                String                @unique
  emailConfirmed       Boolean               @default(false)
  password             String
  SessionId            Int?
  Sessions             Session?
  UserConfirmationCode UserConfirmationCode?
  CulturalAgent        CulturalAgentPF?
  Contact              Contact[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  CulturalCollective   CulturalCollective[]
  CulturalAgentPJ      CulturalAgentPJ?
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserConfirmationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  User      User     @relation(fields: [userId], references: [id])
  code      String
  used      Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CulturalAgentPF {
  id             Int      @id @default(autoincrement())
  alternativeTel String
  cep            String
  complement     String
  county         String
  cpf            String
  programs       String[]
  email          String
  houseNumber    String
  name           String
  neighboorhood  String
  phone          String
  proponent      String
  public         Boolean
  publicPlace    String
  tel            String
  uf             String

  fileId    String   @unique
  File      FilePF?  @relation(fields: [fileId], references: [id])
  userId    Int      @unique
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FilePF {
  id                String           @id @default(cuid())
  name              String
  key               String
  contentType       String
  culturalAgentPFId Int?
  CulturalAgentPF   CulturalAgentPF?
  createdAt         DateTime         @default(now())
}

model CulturalAgentPJ {
  id             Int      @id @default(autoincrement())
  alternativeTel String
  cep            String
  cnpj           String
  complement     String
  county         String
  programs       String[]
  email          String
  fantasyName    String
  houseNumber    String
  job            String
  neighboorhood  String
  phone          String
  proponent      String
  public         Boolean
  publicPlace    String
  responsible    String
  socialReason   String
  tel            String
  uf             String
  website        String

  fileId    String   @unique
  File      FilePJ?  @relation(fields: [fileId], references: [id])
  userId    Int      @unique
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FilePJ {
  id                String           @id @default(cuid())
  name              String
  key               String
  contentType       String
  culturalAgentPJId Int?
  CulturalAgentPJ   CulturalAgentPJ?
  createdAt         DateTime         @default(now())
}

model Contact {
  id        Int      @id @default(autoincrement())
  type      String
  number    String
  public    Boolean
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CulturalCollective {
  id            Int      @id @default(autoincrement())
  name          String
  area          String
  opening       String
  phone         String
  email         String
  address       String
  neighboorhood String
  cep           String
  complement    String?
  county        String
  responsible   String
  userId        Int
  User          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// model Notice {
//   id           Int       @id @default(autoincrement())
//   title        String
//   observations String
//   city         String
//   openingDate  DateTime
//   endDate      DateTime?
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
// }
